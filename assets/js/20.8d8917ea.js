(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{366:function(t,a,s){"use strict";s.r(a);var e=s(42),r=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"浏览器相关知识"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#浏览器相关知识"}},[t._v("#")]),t._v(" 浏览器相关知识")]),t._v(" "),s("h2",{attrs:{id:"浏览器内核"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#浏览器内核"}},[t._v("#")]),t._v(" 浏览器内核")]),t._v(" "),s("p",[t._v("浏览器/RunTime|：内核（渲染引擎）|JavaScript 引擎\n--：|：--|：--\nChrome |Blink（28~） Webkit（Chrome 27） |V8\nFireFox |Gecko | SpiderMonkey\nSafari |Webkit| JavaScriptCore\nEdge |EdgeHTML |Chakra(for JavaScript)\nIE |Trident |Chakra(for JScript)\nPhantomJS |Webkit |JavaScriptCore\nNode.js - |V8|-")]),t._v(" "),s("table",[s("thead",[s("th",[s("td")])]),t._v(" "),s("tbody",[s("tr",[s("td")])])]),t._v(" "),s("h2",{attrs:{id:"浏览器组成"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#浏览器组成"}},[t._v("#")]),t._v(" "),s("a",{attrs:{href:"https://www.jianshu.com/p/e4a75cb6f268",target:"_blank",rel:"noopener noreferrer"}},[t._v("浏览器组成"),s("OutboundLink")],1)]),t._v(" "),s("ol",[s("li",[t._v("用户界面 - 包括地址栏、前进/后退按钮、书签菜单等。除了浏览器主窗口显示的您请求的页面外，其他显示的各个部分都属于用户界面。")]),t._v(" "),s("li",[t._v("浏览器引擎 - 在用户界面和呈现引擎之间传送指令。")]),t._v(" "),s("li",[t._v("呈现引擎 - 负责显示请求的内容。如果请求的内容是 HTML，它就负责解析 HTML 和 CSS 内容，并将解析后的内容显示在屏幕上。")]),t._v(" "),s("li",[t._v("网络 - 用于网络调用，比如 HTTP 请求。其接口与平台无关，并为所有平台提供底层实现。")]),t._v(" "),s("li",[t._v("用户界面后端 - 用于绘制基本的窗口小部件，比如组合框和窗口。其公开了与平台无关的通用接口，而在底层使用操作系统的用户界面方法。")]),t._v(" "),s("li",[t._v("JavaScript 解释器。用于解析和执行 JavaScript 代码。")]),t._v(" "),s("li",[t._v("数据存储。这是持久层。浏览器需要在硬盘上保存各种数据，例如 Cookie。新的 HTML 规范 (HTML5) 定义了“网络数据库”，这是一个完整（但是轻便）的浏览器内数据库。")])]),t._v(" "),s("p",[s("img",{attrs:{src:"/images/browser-layer.webp",alt:""}})]),t._v(" "),s("h2",{attrs:{id:"浏览器引擎工作流程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#浏览器引擎工作流程"}},[t._v("#")]),t._v(" 浏览器引擎工作流程")]),t._v(" "),s("ol",[s("li",[t._v("浏览器获取 HTML 文件，然后对文件进行解析，形成 DOM Tree")]),t._v(" "),s("li",[t._v("与此同时，进行 CSS 解析，生成 Style Rules")]),t._v(" "),s("li",[t._v("接着将 DOM Tree 与 Style Rules 合成为 Render Tree")]),t._v(" "),s("li",[t._v("接着进入布局（Layout）阶段，也就是为每个节点分配一个应出现在屏幕上的确切坐标")]),t._v(" "),s("li",[t._v("随后调用 GPU 进行绘制（Paint），遍历 Render Tree 的节点，并将元素呈现出来\n"),s("img",{attrs:{src:"/images/browser-render.webp",alt:""}})])]),t._v(" "),s("h3",{attrs:{id:"dom-解析和渲染"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#dom-解析和渲染"}},[t._v("#")]),t._v(" "),s("a",{attrs:{href:"https://juejin.im/post/59c60691518825396f4f71a1",target:"_blank",rel:"noopener noreferrer"}},[t._v("DOM 解析和渲染"),s("OutboundLink")],1)]),t._v(" "),s("ol",[s("li",[t._v("CSS 不会阻塞 DOM 的解析")])]),t._v(" "),s("p",[s("img",{attrs:{src:"/images/browser-chunk.webp",alt:""}})]),t._v(" "),s("ol",{attrs:{start:"2"}},[s("li",[s("p",[t._v("CSS 阻塞页面渲染")])]),t._v(" "),s("li",[s("p",[t._v('JS 阻塞 DOM 解析,但浏览器会"偷看"DOM，预先下载相关资源。')])]),t._v(" "),s("li",[s("p",[t._v("浏览器遇到 <script>且没有 defer 或 async 属性的 标签时，会触发页面渲染，因而如果前面 CSS 资源尚未加载完毕时，浏览器会等待它加载完毕在执行脚本。")])])]),t._v(" "),s("h2",{attrs:{id:"css-解析"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#css-解析"}},[t._v("#")]),t._v(" "),s("a",{attrs:{href:"https://segmentfault.com/a/1190000016253407",target:"_blank",rel:"noopener noreferrer"}},[t._v("CSS 解析"),s("OutboundLink")],1)]),t._v(" "),s("p",[s("a",{attrs:{href:"https://www.cnblogs.com/fundebug/p/how-does-browser-parse-css.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("浏览器如何解析"),s("OutboundLink")],1)]),t._v(" "),s("p",[s("a",{attrs:{href:"https://segmentfault.com/a/1190000009236417",target:"_blank",rel:"noopener noreferrer"}},[t._v("浏览器工作流程"),s("OutboundLink")],1),t._v("\nCSS 从右往左解析，因此可以想到 HTML 性能调优的时候，尽量减少层级嵌套")]),t._v(" "),s("h2",{attrs:{id:"css-优先级"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#css-优先级"}},[t._v("#")]),t._v(" CSS 优先级")]),t._v(" "),s("ul",[s("li",[t._v("!important > 内联 > ID > 类 > 标签 | 伪类 | 属性选择 > 伪对象 > 通配符 > 继承")])]),t._v(" "),s("h2",{attrs:{id:"dom-tree-构建"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#dom-tree-构建"}},[t._v("#")]),t._v(" "),s("a",{attrs:{href:"https://www.jianshu.com/p/14d54a263291",target:"_blank",rel:"noopener noreferrer"}},[t._v("DOM Tree 构建"),s("OutboundLink")],1)]),t._v(" "),s("ol",[s("li",[t._v("转码: 浏览器将接收到的二进制数据按照指定编码格式转化为 HTML 字符串")]),t._v(" "),s("li",[t._v("生成 Tokens: 之后开始 parser，浏览器会将 HTML 字符串解析成 Tokens")]),t._v(" "),s("li",[t._v("构建 Nodes: 对 Node 添加特定的属性，通过指针确定 Node 的父、子、兄弟关系和所属 treeScope")]),t._v(" "),s("li",[t._v("生成 DOM Tree: 通过 node 包含的指针确定的关系构建出 DOM Tree\n"),s("img",{attrs:{src:"/images/dom-tree-render.png",alt:""}})])]),t._v(" "),s("h2",{attrs:{id:"回流与重绘"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#回流与重绘"}},[t._v("#")]),t._v(" 回流与重绘")]),t._v(" "),s("ul",[s("li",[t._v("回流: 部分渲染树（或者整个渲染树）需要重新分析并且节点尺寸需要重新计算，表现为重新生成布局，重新排列元素")]),t._v(" "),s("li",[t._v("重绘: 由于节点的几何属性发生改变或者由于样式发生改变，例如改变元素背景色时，屏幕上的部分内容需要更新，表现为某些元素的外观被改变")])]),t._v(" "),s("p",[t._v("单单改变元素的外观，肯定不会引起网页重新生成布局，但当浏览器完成回流之后，将会重新绘制受到此次回流影响的部分")]),t._v(" "),s("p",[t._v("回流和重绘代价是高昂的，它们会破坏用户体验，并且让 UI 展示非常迟缓，而相比之下回流的性能影响更大，在两者无法避免的情况下，一般我们宁可选择代价更小的重绘。")]),t._v(" "),s("p",[t._v("『重绘』不一定会出现『回流』，『回流』必然会出现『重绘』。")]),t._v(" "),s("h2",{attrs:{id:"如何触发回流和重绘"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#如何触发回流和重绘"}},[t._v("#")]),t._v(" 如何触发回流和重绘？")]),t._v(" "),s("p",[t._v("任何改变用来构建渲染树的信息都会导致一次回流或重绘：")]),t._v(" "),s("ul",[s("li",[t._v("添加、删除、更新 DOM 节点")]),t._v(" "),s("li",[t._v("通过 display: none 隐藏一个 DOM 节点-触发回流和重绘")]),t._v(" "),s("li",[t._v("通过 visibility: hidden 隐藏一个 DOM 节点-只触发重绘，因为没有几何变化")]),t._v(" "),s("li",[t._v("移动或者给页面中的 DOM 节点添加动画")]),t._v(" "),s("li",[t._v("添加一个样式表，调整样式属性")]),t._v(" "),s("li",[t._v("用户行为，例如调整窗口大小，改变字号，或者滚动。")])]),t._v(" "),s("h2",{attrs:{id:"如何避免重绘或者回流"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#如何避免重绘或者回流"}},[t._v("#")]),t._v(" 如何避免重绘或者回流？")]),t._v(" "),s("h3",{attrs:{id:"集中改变样式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#集中改变样式"}},[t._v("#")]),t._v(" 集中改变样式")]),t._v(" "),s("p",[t._v("我们往往通过改变 class 的方式来集中改变样式")]),t._v(" "),s("div",{staticClass:"language-js line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 判断是否是黑色系样式")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" theme "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" isDark "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"dark"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"light"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 根据判断来设置不同的class")]),t._v("\nele"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setAttribute")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"className"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" theme"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br")])]),s("h4",{attrs:{id:"使用-documentfragment"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用-documentfragment"}},[t._v("#")]),t._v(" 使用 DocumentFragment")]),t._v(" "),s("p",[t._v("我们可以通过 createDocumentFragment 创建一个游离于 DOM 树之外的节点，然后在此节点上批量操作，最后插入 DOM 树中，因此只触发一次回流")]),t._v(" "),s("div",{staticClass:"language-js line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" fragment "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" document"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("createDocumentFragment")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" node "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" document"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("createElement")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"p"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  node"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("innerHTML "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  fragment"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("appendChild")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("node"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\ndocument"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("body"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("appendChild")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fragment"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br")])]),s("h3",{attrs:{id:"提升为合成层"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#提升为合成层"}},[t._v("#")]),t._v(" 提升为合成层")]),t._v(" "),s("p",[t._v("将元素提升为合成层有以下优点：")]),t._v(" "),s("ul",[s("li",[t._v("合成层的位图，会交由 GPU 合成，比 CPU 处理要快")]),t._v(" "),s("li",[t._v("当需要 repaint 时，只需要 repaint 本身，不会影响到其他的层")]),t._v(" "),s("li",[t._v("对于 transform 和 opacity 效果，不会触发 layout 和 paint\n提升合成层的最好方式是使用 CSS 的 will-change 属性：")])]),t._v(" "),s("div",{staticClass:"language-css line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-css"}},[s("code",[s("span",{pre:!0,attrs:{class:"token selector"}},[t._v("#target")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v("will-change")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" transform"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("h2",{attrs:{id:"前端及时通信"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#前端及时通信"}},[t._v("#")]),t._v(" 前端及时通信")]),t._v(" "),s("h3",{attrs:{id:"短轮询"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#短轮询"}},[t._v("#")]),t._v(" 短轮询")]),t._v(" "),s("h3",{attrs:{id:"comet"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#comet"}},[t._v("#")]),t._v(" "),s("a",{attrs:{href:"http://www.52im.net/thread-334-1-1.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Comet"),s("OutboundLink")],1)]),t._v(" "),s("h3",{attrs:{id:"sse"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#sse"}},[t._v("#")]),t._v(" "),s("a",{attrs:{href:"https://www.ruanyifeng.com/blog/2017/05/server-sent_events.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("SSE"),s("OutboundLink")],1)]),t._v(" "),s("p",[t._v("SSE 与 WebSocket 作用相似，都是建立浏览器与服务器之间的通信渠道，然后服务器向浏览器推送信息。\n总体来说，WebSocket 更强大和灵活。因为它是全双工通道，可以双向通信；SSE 是单向通道，只能服务器向浏览器发送，因为流信息本质上就是下载。如果浏览器向服务器发送信息，就变成了另一次 HTTP 请求。")]),t._v(" "),s("p",[s("img",{attrs:{src:"/images/ryf-server-sent-events.jpg",alt:""}})]),t._v(" "),s("p",[t._v("但是，SSE 也有自己的优点。")]),t._v(" "),s("ul",[s("li",[t._v("SSE 使用 HTTP 协议，现有的服务器软件都支持。WebSocket 是一个独立协议。")]),t._v(" "),s("li",[t._v("SSE 属于轻量级，使用简单；WebSocket 协议相对复杂。")]),t._v(" "),s("li",[t._v("SSE 默认支持断线重连，WebSocket 需要自己实现。")]),t._v(" "),s("li",[t._v("SSE 一般只用来传送文本，二进制数据需要编码后传送，WebSocket 默认支持传送二进制数据。")]),t._v(" "),s("li",[t._v("SSE 支持自定义发送的消息类型。")])]),t._v(" "),s("h3",{attrs:{id:"websocket"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#websocket"}},[t._v("#")]),t._v(" "),s("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2017/05/websocket.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("websocket"),s("OutboundLink")],1)]),t._v(" "),s("p",[t._v("WebSocket 协议在 2008 年诞生，2011 年成为国际标准。所有浏览器都已经支持了。\n它的最大特点就是，服务器可以主动向客户端推送信息，客户端也可以主动向服务器发送信息，是真正的双向平等对话，属于服务器推送技术的一种。\n"),s("img",{attrs:{src:"/images/ryf-websocket.png",alt:""}}),t._v("\n其他特点包括：")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("（1）建立在 TCP 协议之上，服务器端的实现比较容易。")])]),t._v(" "),s("li",[s("p",[t._v("（2）与 HTTP 协议有着良好的兼容性。默认端口也是 80 和 443，并且握手阶段采用 HTTP 协议，因此握手时不容易屏蔽，能通过各种 HTTP 代理服务器。")])]),t._v(" "),s("li",[s("p",[t._v("（3）数据格式比较轻量，性能开销小，通信高效。")])]),t._v(" "),s("li",[s("p",[t._v("（4）可以发送文本，也可以发送二进制数据。")])]),t._v(" "),s("li",[s("p",[t._v("（5）没有同源限制，客户端可以与任意服务器通信。")])]),t._v(" "),s("li",[s("p",[t._v("（6）协议标识符是 ws（如果加密，则为 wss），服务器网址就是 URL。")])]),t._v(" "),s("li",[s("p",[t._v("优点：真正意义上的实时双向通信，性能好，低延迟")])]),t._v(" "),s("li",[s("p",[t._v("缺点：独立与 http 的协议，因此需要额外的项目改造，使用复杂度高，必须引入成熟的库，无法兼容低版本浏览器")])])]),t._v(" "),s("h3",{attrs:{id:"webworker"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#webworker"}},[t._v("#")]),t._v(" "),s("RouterLink",{attrs:{to:"/webworker/"}},[t._v("webworker")])],1),t._v(" "),s("h3",{attrs:{id:"service-worker"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#service-worker"}},[t._v("#")]),t._v(" "),s("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/API/Service_Worker_API",target:"_blank",rel:"noopener noreferrer"}},[t._v("service worker"),s("OutboundLink")],1)]),t._v(" "),s("h2",{attrs:{id:"浏览器同源"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#浏览器同源"}},[t._v("#")]),t._v(" 浏览器同源")]),t._v(" "),s("p",[t._v('同源策略是一种约定，它是浏览器最核心也最基本的安全功能，如果缺少了同源策略，浏览器很容易受到 XSS、CSRF 等攻击。所谓同源是指"协议+域名+端口"三者相同，即便两个不同的域名指向同一个 ip 地址，也非同源。\n'),s("img",{attrs:{src:"/images/site-origin.webp",alt:""}})]),t._v(" "),s("p",[t._v("可实现跨域的标签\n<link>\n<img>\n<script>")]),t._v(" "),s("p",[t._v("当协议、子域名、主域名、端口号中任意一个不相同时，都算作不同域。不同域之间相互请求资源，就算作“跨域”。常见跨域场景如下图所示：")]),t._v(" "),s("p",[s("img",{attrs:{src:"/images/cross-site-type.webp",alt:""}})]),t._v(" "),s("h2",{attrs:{id:"如何实现跨域"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#如何实现跨域"}},[t._v("#")]),t._v(" 如何实现跨域")]),t._v(" "),s("h3",{attrs:{id:"jsonp"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#jsonp"}},[t._v("#")]),t._v(" JSONP")]),t._v(" "),s("p",[t._v("最经典")]),t._v(" "),s("h3",{attrs:{id:"cors"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#cors"}},[t._v("#")]),t._v(" CORS")]),t._v(" "),s("p",[t._v("最流行")]),t._v(" "),s("h3",{attrs:{id:"nginx"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#nginx"}},[t._v("#")]),t._v(" NGINX")]),t._v(" "),s("p",[t._v("最方便")]),t._v(" "),s("h3",{attrs:{id:"其他方案"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#其他方案"}},[t._v("#")]),t._v(" "),s("a",{attrs:{href:"https://juejin.im/post/5c23993de51d457b8c1f4ee1#heading-19",target:"_blank",rel:"noopener noreferrer"}},[t._v("其他方案"),s("OutboundLink")],1)])])}),[],!1,null,null,null);a.default=r.exports}}]);